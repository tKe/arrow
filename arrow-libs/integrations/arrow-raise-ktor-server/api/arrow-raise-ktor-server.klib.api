// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.arrow-kt:arrow-raise-ktor-server>
abstract fun interface <#A: kotlin/Any?, #B: kotlin/Any?> arrow.raise.ktor.server/ReceivingRespondingRaiseRoutingHandler { // arrow.raise.ktor.server/ReceivingRespondingRaiseRoutingHandler|null[0]
    abstract suspend fun (context(arrow.core.raise/Raise<arrow.raise.ktor.server/Response>), io.ktor.server.routing/RoutingContext).handle(#A): #B // arrow.raise.ktor.server/ReceivingRespondingRaiseRoutingHandler.handle|handle(arrow.core.raise.Raise<arrow.raise.ktor.server.Response>)@io.ktor.server.routing.RoutingContext(1:0){}[0]
}

sealed interface arrow.raise.ktor.server.request/Parameter : arrow.raise.ktor.server.request/RequestComponent { // arrow.raise.ktor.server.request/Parameter|null[0]
    abstract val name // arrow.raise.ktor.server.request/Parameter.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // arrow.raise.ktor.server.request/Parameter.name.<get-name>|<get-name>(){}[0]

    final class Form : arrow.raise.ktor.server.request/Parameter { // arrow.raise.ktor.server.request/Parameter.Form|null[0]
        constructor <init>(kotlin/String) // arrow.raise.ktor.server.request/Parameter.Form.<init>|<init>(kotlin.String){}[0]

        final val name // arrow.raise.ktor.server.request/Parameter.Form.name|{}name[0]
            final fun <get-name>(): kotlin/String // arrow.raise.ktor.server.request/Parameter.Form.name.<get-name>|<get-name>(){}[0]

        final fun component1(): kotlin/String // arrow.raise.ktor.server.request/Parameter.Form.component1|component1(){}[0]
        final fun copy(kotlin/String = ...): arrow.raise.ktor.server.request/Parameter.Form // arrow.raise.ktor.server.request/Parameter.Form.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // arrow.raise.ktor.server.request/Parameter.Form.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // arrow.raise.ktor.server.request/Parameter.Form.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // arrow.raise.ktor.server.request/Parameter.Form.toString|toString(){}[0]
    }

    final class Path : arrow.raise.ktor.server.request/Parameter { // arrow.raise.ktor.server.request/Parameter.Path|null[0]
        constructor <init>(kotlin/String) // arrow.raise.ktor.server.request/Parameter.Path.<init>|<init>(kotlin.String){}[0]

        final val name // arrow.raise.ktor.server.request/Parameter.Path.name|{}name[0]
            final fun <get-name>(): kotlin/String // arrow.raise.ktor.server.request/Parameter.Path.name.<get-name>|<get-name>(){}[0]

        final fun component1(): kotlin/String // arrow.raise.ktor.server.request/Parameter.Path.component1|component1(){}[0]
        final fun copy(kotlin/String = ...): arrow.raise.ktor.server.request/Parameter.Path // arrow.raise.ktor.server.request/Parameter.Path.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // arrow.raise.ktor.server.request/Parameter.Path.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // arrow.raise.ktor.server.request/Parameter.Path.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // arrow.raise.ktor.server.request/Parameter.Path.toString|toString(){}[0]
    }

    final class Query : arrow.raise.ktor.server.request/Parameter { // arrow.raise.ktor.server.request/Parameter.Query|null[0]
        constructor <init>(kotlin/String) // arrow.raise.ktor.server.request/Parameter.Query.<init>|<init>(kotlin.String){}[0]

        final val name // arrow.raise.ktor.server.request/Parameter.Query.name|{}name[0]
            final fun <get-name>(): kotlin/String // arrow.raise.ktor.server.request/Parameter.Query.name.<get-name>|<get-name>(){}[0]

        final fun component1(): kotlin/String // arrow.raise.ktor.server.request/Parameter.Query.component1|component1(){}[0]
        final fun copy(kotlin/String = ...): arrow.raise.ktor.server.request/Parameter.Query // arrow.raise.ktor.server.request/Parameter.Query.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // arrow.raise.ktor.server.request/Parameter.Query.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // arrow.raise.ktor.server.request/Parameter.Query.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // arrow.raise.ktor.server.request/Parameter.Query.toString|toString(){}[0]
    }
}

sealed interface arrow.raise.ktor.server.request/RequestComponent // arrow.raise.ktor.server.request/RequestComponent|null[0]

sealed interface arrow.raise.ktor.server.request/RequestError // arrow.raise.ktor.server.request/RequestError|null[0]

sealed interface arrow.raise.ktor.server/Response { // arrow.raise.ktor.server/Response|null[0]
    abstract suspend fun respondTo(io.ktor.server.application/ApplicationCall) // arrow.raise.ktor.server/Response.respondTo|respondTo(io.ktor.server.application.ApplicationCall){}[0]

    final object Companion { // arrow.raise.ktor.server/Response.Companion|null[0]
        final fun Response(io.ktor.http.content/OutgoingContent): arrow.raise.ktor.server/Response // arrow.raise.ktor.server/Response.Companion.Response|Response(io.ktor.http.content.OutgoingContent){}[0]
        final fun Response(io.ktor.http/HttpStatusCode): arrow.raise.ktor.server/Response // arrow.raise.ktor.server/Response.Companion.Response|Response(io.ktor.http.HttpStatusCode){}[0]
        final fun Response(io.ktor.http/HttpStatusCode, kotlin/Any?, io.ktor.util.reflect/TypeInfo): arrow.raise.ktor.server/Response // arrow.raise.ktor.server/Response.Companion.Response|Response(io.ktor.http.HttpStatusCode;kotlin.Any?;io.ktor.util.reflect.TypeInfo){}[0]
        final fun empty(io.ktor.http/HttpStatusCode = ...): arrow.raise.ktor.server/Response // arrow.raise.ktor.server/Response.Companion.empty|empty(io.ktor.http.HttpStatusCode){}[0]
        final fun raw(io.ktor.http.content/OutgoingContent): arrow.raise.ktor.server/Response // arrow.raise.ktor.server/Response.Companion.raw|raw(io.ktor.http.content.OutgoingContent){}[0]
        final inline fun <#A2: reified kotlin/Any> (io.ktor.http/HttpStatusCode).invoke(#A2): arrow.raise.ktor.server/Response // arrow.raise.ktor.server/Response.Companion.invoke|invoke@io.ktor.http.HttpStatusCode(0:0){0ยง<kotlin.Any>}[0]
        final inline fun <#A2: reified kotlin/Any?> Response(io.ktor.http/HttpStatusCode, #A2): arrow.raise.ktor.server/Response // arrow.raise.ktor.server/Response.Companion.Response|Response(io.ktor.http.HttpStatusCode;0:0){0ยง<kotlin.Any?>}[0]
        final inline fun <#A2: reified kotlin/Any?> payload(#A2, io.ktor.http/HttpStatusCode = ...): arrow.raise.ktor.server/Response // arrow.raise.ktor.server/Response.Companion.payload|payload(0:0;io.ktor.http.HttpStatusCode){0ยง<kotlin.Any?>}[0]
    }
}

final class arrow.raise.ktor.server.request/Malformed : arrow.raise.ktor.server.request/RequestError { // arrow.raise.ktor.server.request/Malformed|null[0]
    constructor <init>(arrow.raise.ktor.server.request/RequestComponent, kotlin/String, kotlin/Throwable? = ...) // arrow.raise.ktor.server.request/Malformed.<init>|<init>(arrow.raise.ktor.server.request.RequestComponent;kotlin.String;kotlin.Throwable?){}[0]

    final val cause // arrow.raise.ktor.server.request/Malformed.cause|{}cause[0]
        final fun <get-cause>(): kotlin/Throwable? // arrow.raise.ktor.server.request/Malformed.cause.<get-cause>|<get-cause>(){}[0]
    final val component // arrow.raise.ktor.server.request/Malformed.component|{}component[0]
        final fun <get-component>(): arrow.raise.ktor.server.request/RequestComponent // arrow.raise.ktor.server.request/Malformed.component.<get-component>|<get-component>(){}[0]
    final val message // arrow.raise.ktor.server.request/Malformed.message|{}message[0]
        final fun <get-message>(): kotlin/String // arrow.raise.ktor.server.request/Malformed.message.<get-message>|<get-message>(){}[0]

    final fun component1(): arrow.raise.ktor.server.request/RequestComponent // arrow.raise.ktor.server.request/Malformed.component1|component1(){}[0]
    final fun component2(): kotlin/String // arrow.raise.ktor.server.request/Malformed.component2|component2(){}[0]
    final fun component3(): kotlin/Throwable? // arrow.raise.ktor.server.request/Malformed.component3|component3(){}[0]
    final fun copy(arrow.raise.ktor.server.request/RequestComponent = ..., kotlin/String = ..., kotlin/Throwable? = ...): arrow.raise.ktor.server.request/Malformed // arrow.raise.ktor.server.request/Malformed.copy|copy(arrow.raise.ktor.server.request.RequestComponent;kotlin.String;kotlin.Throwable?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.raise.ktor.server.request/Malformed.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.raise.ktor.server.request/Malformed.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // arrow.raise.ktor.server.request/Malformed.toString|toString(){}[0]
}

final class arrow.raise.ktor.server.request/MissingParameter : arrow.raise.ktor.server.request/RequestError { // arrow.raise.ktor.server.request/MissingParameter|null[0]
    constructor <init>(arrow.raise.ktor.server.request/Parameter) // arrow.raise.ktor.server.request/MissingParameter.<init>|<init>(arrow.raise.ktor.server.request.Parameter){}[0]

    final val parameter // arrow.raise.ktor.server.request/MissingParameter.parameter|{}parameter[0]
        final fun <get-parameter>(): arrow.raise.ktor.server.request/Parameter // arrow.raise.ktor.server.request/MissingParameter.parameter.<get-parameter>|<get-parameter>(){}[0]

    final fun component1(): arrow.raise.ktor.server.request/Parameter // arrow.raise.ktor.server.request/MissingParameter.component1|component1(){}[0]
    final fun copy(arrow.raise.ktor.server.request/Parameter = ...): arrow.raise.ktor.server.request/MissingParameter // arrow.raise.ktor.server.request/MissingParameter.copy|copy(arrow.raise.ktor.server.request.Parameter){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.raise.ktor.server.request/MissingParameter.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.raise.ktor.server.request/MissingParameter.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // arrow.raise.ktor.server.request/MissingParameter.toString|toString(){}[0]
}

final class arrow.raise.ktor.server.request/RaisingParameters : io.ktor.http/Parameters { // arrow.raise.ktor.server.request/RaisingParameters|null[0]
    constructor <init>(io.ktor.server.application/ApplicationCall, io.ktor.http/Parameters, kotlin/Function1<kotlin/String, arrow.raise.ktor.server.request/Parameter>) // arrow.raise.ktor.server.request/RaisingParameters.<init>|<init>(io.ktor.server.application.ApplicationCall;io.ktor.http.Parameters;kotlin.Function1<kotlin.String,arrow.raise.ktor.server.request.Parameter>){}[0]

    final val call // arrow.raise.ktor.server.request/RaisingParameters.call|{}call[0]
        final fun <get-call>(): io.ktor.server.application/ApplicationCall // arrow.raise.ktor.server.request/RaisingParameters.call.<get-call>|<get-call>(){}[0]
    final val caseInsensitiveName // arrow.raise.ktor.server.request/RaisingParameters.caseInsensitiveName|{}caseInsensitiveName[0]
        final fun <get-caseInsensitiveName>(): kotlin/Boolean // arrow.raise.ktor.server.request/RaisingParameters.caseInsensitiveName.<get-caseInsensitiveName>|<get-caseInsensitiveName>(){}[0]
    final val parameter // arrow.raise.ktor.server.request/RaisingParameters.parameter|{}parameter[0]
        final fun <get-parameter>(): kotlin/Function1<kotlin/String, arrow.raise.ktor.server.request/Parameter> // arrow.raise.ktor.server.request/RaisingParameters.parameter.<get-parameter>|<get-parameter>(){}[0]

    final fun (context(arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>)).invoke(): kotlin.properties/PropertyDelegateProvider<kotlin/Nothing?, arrow.raise.ktor.server.request/Value<kotlin/String>> // arrow.raise.ktor.server.request/RaisingParameters.invoke|invoke(arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>)(){}[0]
    final fun (context(arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>)).invoke(kotlin/String): kotlin/String // arrow.raise.ktor.server.request/RaisingParameters.invoke|invoke(arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>)(kotlin.String){}[0]
    final fun contains(kotlin/String): kotlin/Boolean // arrow.raise.ktor.server.request/RaisingParameters.contains|contains(kotlin.String){}[0]
    final fun contains(kotlin/String, kotlin/String): kotlin/Boolean // arrow.raise.ktor.server.request/RaisingParameters.contains|contains(kotlin.String;kotlin.String){}[0]
    final fun entries(): kotlin.collections/Set<kotlin.collections/Map.Entry<kotlin/String, kotlin.collections/List<kotlin/String>>> // arrow.raise.ktor.server.request/RaisingParameters.entries|entries(){}[0]
    final fun forEach(kotlin/Function2<kotlin/String, kotlin.collections/List<kotlin/String>, kotlin/Unit>) // arrow.raise.ktor.server.request/RaisingParameters.forEach|forEach(kotlin.Function2<kotlin.String,kotlin.collections.List<kotlin.String>,kotlin.Unit>){}[0]
    final fun get(kotlin/String): kotlin/String? // arrow.raise.ktor.server.request/RaisingParameters.get|get(kotlin.String){}[0]
    final fun getAll(kotlin/String): kotlin.collections/List<kotlin/String>? // arrow.raise.ktor.server.request/RaisingParameters.getAll|getAll(kotlin.String){}[0]
    final fun isEmpty(): kotlin/Boolean // arrow.raise.ktor.server.request/RaisingParameters.isEmpty|isEmpty(){}[0]
    final fun names(): kotlin.collections/Set<kotlin/String> // arrow.raise.ktor.server.request/RaisingParameters.names|names(){}[0]
    final inline fun <#A1: kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>)).invoke(crossinline kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A1>): kotlin.properties/PropertyDelegateProvider<kotlin/Nothing?, arrow.raise.ktor.server.request/Value<#A1>> // arrow.raise.ktor.server.request/RaisingParameters.invoke|invoke(arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>)(kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0ยง<kotlin.Any>}[0]
    final inline fun <#A1: kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>)).invoke(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A1>): #A1 // arrow.raise.ktor.server.request/RaisingParameters.invoke|invoke(arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>)(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0ยง<kotlin.Any>}[0]
    final inline fun <#A1: reified kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>)).get(kotlin/String): #A1 // arrow.raise.ktor.server.request/RaisingParameters.get|get(arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>)(kotlin.String){0ยง<kotlin.Any>}[0]
    final inline fun <#A1: reified kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>)).invoke(kotlin/String): #A1 // arrow.raise.ktor.server.request/RaisingParameters.invoke|invoke(arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>)(kotlin.String){0ยง<kotlin.Any>}[0]
    final inline fun <#A1: reified kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>)).invoke(kotlin/Unit = ...): kotlin.properties/PropertyDelegateProvider<kotlin/Nothing?, arrow.raise.ktor.server.request/Value<#A1>> // arrow.raise.ktor.server.request/RaisingParameters.invoke|invoke(arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>)(kotlin.Unit){0ยง<kotlin.Any>}[0]
}

final class arrow.raise.ktor.server/RaiseErrorResponseConfig { // arrow.raise.ktor.server/RaiseErrorResponseConfig|null[0]
    constructor <init>(kotlin/Function1<arrow.core/NonEmptyList<arrow.raise.ktor.server.request/RequestError>, arrow.raise.ktor.server/Response> = ...) // arrow.raise.ktor.server/RaiseErrorResponseConfig.<init>|<init>(kotlin.Function1<arrow.core.NonEmptyList<arrow.raise.ktor.server.request.RequestError>,arrow.raise.ktor.server.Response>){}[0]

    final var errorResponse // arrow.raise.ktor.server/RaiseErrorResponseConfig.errorResponse|{}errorResponse[0]
        final fun <get-errorResponse>(): kotlin/Function1<arrow.core/NonEmptyList<arrow.raise.ktor.server.request/RequestError>, arrow.raise.ktor.server/Response> // arrow.raise.ktor.server/RaiseErrorResponseConfig.errorResponse.<get-errorResponse>|<get-errorResponse>(){}[0]
        final fun <set-errorResponse>(kotlin/Function1<arrow.core/NonEmptyList<arrow.raise.ktor.server.request/RequestError>, arrow.raise.ktor.server/Response>) // arrow.raise.ktor.server/RaiseErrorResponseConfig.errorResponse.<set-errorResponse>|<set-errorResponse>(kotlin.Function1<arrow.core.NonEmptyList<arrow.raise.ktor.server.request.RequestError>,arrow.raise.ktor.server.Response>){}[0]

    final fun errorResponse(kotlin/Function1<arrow.core/NonEmptyList<arrow.raise.ktor.server.request/RequestError>, arrow.raise.ktor.server/Response>) // arrow.raise.ktor.server/RaiseErrorResponseConfig.errorResponse|errorResponse(kotlin.Function1<arrow.core.NonEmptyList<arrow.raise.ktor.server.request.RequestError>,arrow.raise.ktor.server.Response>){}[0]
}

final value class <#A: kotlin/Any?> arrow.raise.ktor.server.request/Value { // arrow.raise.ktor.server.request/Value|null[0]
    constructor <init>(#A) // arrow.raise.ktor.server.request/Value.<init>|<init>(1:0){}[0]

    final val value // arrow.raise.ktor.server.request/Value.value|{}value[0]
        final fun <get-value>(): #A // arrow.raise.ktor.server.request/Value.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.raise.ktor.server.request/Value.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.raise.ktor.server.request/Value.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // arrow.raise.ktor.server.request/Value.toString|toString(){}[0]
    final inline fun getValue(kotlin/Any?, kotlin.reflect/KProperty<*>): #A // arrow.raise.ktor.server.request/Value.getValue|getValue(kotlin.Any?;kotlin.reflect.KProperty<*>){}[0]
}

final value class arrow.raise.ktor.server.request/AccumulatingParameters : io.ktor.http/Parameters { // arrow.raise.ktor.server.request/AccumulatingParameters|null[0]
    constructor <init>(arrow.raise.ktor.server.request/RaisingParameters) // arrow.raise.ktor.server.request/AccumulatingParameters.<init>|<init>(arrow.raise.ktor.server.request.RaisingParameters){}[0]

    final val caseInsensitiveName // arrow.raise.ktor.server.request/AccumulatingParameters.caseInsensitiveName|{}caseInsensitiveName[0]
        final fun <get-caseInsensitiveName>(): kotlin/Boolean // arrow.raise.ktor.server.request/AccumulatingParameters.caseInsensitiveName.<get-caseInsensitiveName>|<get-caseInsensitiveName>(){}[0]
    final val parameters // arrow.raise.ktor.server.request/AccumulatingParameters.parameters|{}parameters[0]
        final fun <get-parameters>(): arrow.raise.ktor.server.request/RaisingParameters // arrow.raise.ktor.server.request/AccumulatingParameters.parameters.<get-parameters>|<get-parameters>(){}[0]

    final fun (context(arrow.core.raise/RaiseAccumulate<arrow.raise.ktor.server.request/RequestError>)).invoke(): kotlin.properties/PropertyDelegateProvider<kotlin/Nothing?, arrow.core.raise/RaiseAccumulate.Value<kotlin/String>> // arrow.raise.ktor.server.request/AccumulatingParameters.invoke|invoke(arrow.core.raise.RaiseAccumulate<arrow.raise.ktor.server.request.RequestError>)(){}[0]
    final fun (context(arrow.core.raise/RaiseAccumulate<arrow.raise.ktor.server.request/RequestError>)).invoke(kotlin/String): arrow.core.raise/RaiseAccumulate.Value<kotlin/String> // arrow.raise.ktor.server.request/AccumulatingParameters.invoke|invoke(arrow.core.raise.RaiseAccumulate<arrow.raise.ktor.server.request.RequestError>)(kotlin.String){}[0]
    final fun contains(kotlin/String): kotlin/Boolean // arrow.raise.ktor.server.request/AccumulatingParameters.contains|contains(kotlin.String){}[0]
    final fun contains(kotlin/String, kotlin/String): kotlin/Boolean // arrow.raise.ktor.server.request/AccumulatingParameters.contains|contains(kotlin.String;kotlin.String){}[0]
    final fun entries(): kotlin.collections/Set<kotlin.collections/Map.Entry<kotlin/String, kotlin.collections/List<kotlin/String>>> // arrow.raise.ktor.server.request/AccumulatingParameters.entries|entries(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.raise.ktor.server.request/AccumulatingParameters.equals|equals(kotlin.Any?){}[0]
    final fun forEach(kotlin/Function2<kotlin/String, kotlin.collections/List<kotlin/String>, kotlin/Unit>) // arrow.raise.ktor.server.request/AccumulatingParameters.forEach|forEach(kotlin.Function2<kotlin.String,kotlin.collections.List<kotlin.String>,kotlin.Unit>){}[0]
    final fun get(kotlin/String): kotlin/String? // arrow.raise.ktor.server.request/AccumulatingParameters.get|get(kotlin.String){}[0]
    final fun getAll(kotlin/String): kotlin.collections/List<kotlin/String>? // arrow.raise.ktor.server.request/AccumulatingParameters.getAll|getAll(kotlin.String){}[0]
    final fun hashCode(): kotlin/Int // arrow.raise.ktor.server.request/AccumulatingParameters.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // arrow.raise.ktor.server.request/AccumulatingParameters.isEmpty|isEmpty(){}[0]
    final fun names(): kotlin.collections/Set<kotlin/String> // arrow.raise.ktor.server.request/AccumulatingParameters.names|names(){}[0]
    final fun toString(): kotlin/String // arrow.raise.ktor.server.request/AccumulatingParameters.toString|toString(){}[0]
    final inline fun <#A1: kotlin/Any> (context(arrow.core.raise/RaiseAccumulate<arrow.raise.ktor.server.request/RequestError>)).invoke(crossinline kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A1>): kotlin.properties/PropertyDelegateProvider<kotlin/Nothing?, arrow.core.raise/RaiseAccumulate.Value<#A1>> // arrow.raise.ktor.server.request/AccumulatingParameters.invoke|invoke(arrow.core.raise.RaiseAccumulate<arrow.raise.ktor.server.request.RequestError>)(kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0ยง<kotlin.Any>}[0]
    final inline fun <#A1: kotlin/Any> (context(arrow.core.raise/RaiseAccumulate<arrow.raise.ktor.server.request/RequestError>)).invoke(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A1>): arrow.core.raise/RaiseAccumulate.Value<#A1> // arrow.raise.ktor.server.request/AccumulatingParameters.invoke|invoke(arrow.core.raise.RaiseAccumulate<arrow.raise.ktor.server.request.RequestError>)(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0ยง<kotlin.Any>}[0]
    final inline fun <#A1: reified kotlin/Any> (context(arrow.core.raise/RaiseAccumulate<arrow.raise.ktor.server.request/RequestError>)).get(kotlin/String): arrow.core.raise/RaiseAccumulate.Value<#A1> // arrow.raise.ktor.server.request/AccumulatingParameters.get|get(arrow.core.raise.RaiseAccumulate<arrow.raise.ktor.server.request.RequestError>)(kotlin.String){0ยง<kotlin.Any>}[0]
    final inline fun <#A1: reified kotlin/Any> (context(arrow.core.raise/RaiseAccumulate<arrow.raise.ktor.server.request/RequestError>)).invoke(kotlin/String, kotlin/Unit = ...): arrow.core.raise/RaiseAccumulate.Value<#A1> // arrow.raise.ktor.server.request/AccumulatingParameters.invoke|invoke(arrow.core.raise.RaiseAccumulate<arrow.raise.ktor.server.request.RequestError>)(kotlin.String;kotlin.Unit){0ยง<kotlin.Any>}[0]
    final inline fun <#A1: reified kotlin/Any> (context(arrow.core.raise/RaiseAccumulate<arrow.raise.ktor.server.request/RequestError>)).invoke(kotlin/Unit = ...): kotlin.properties/PropertyDelegateProvider<kotlin/Nothing?, arrow.core.raise/RaiseAccumulate.Value<#A1>> // arrow.raise.ktor.server.request/AccumulatingParameters.invoke|invoke(arrow.core.raise.RaiseAccumulate<arrow.raise.ktor.server.request.RequestError>)(kotlin.Unit){0ยง<kotlin.Any>}[0]
}

final object arrow.raise.ktor.server.request/ReceiveBody : arrow.raise.ktor.server.request/RequestComponent { // arrow.raise.ktor.server.request/ReceiveBody|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.raise.ktor.server.request/ReceiveBody.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.raise.ktor.server.request/ReceiveBody.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // arrow.raise.ktor.server.request/ReceiveBody.toString|toString(){}[0]
}

final val arrow.raise.ktor.server.request/pathAccumulating // arrow.raise.ktor.server.request/pathAccumulating|(io.ktor.server.routing.RoutingContext){}pathAccumulating[0]
    final inline fun (context(io.ktor.server.routing/RoutingContext)).<get-pathAccumulating>(): arrow.raise.ktor.server.request/AccumulatingParameters // arrow.raise.ktor.server.request/pathAccumulating.<get-pathAccumulating>|<get-pathAccumulating>(io.ktor.server.routing.RoutingContext)(){}[0]
final val arrow.raise.ktor.server.request/pathAccumulating // arrow.raise.ktor.server.request/pathAccumulating|@io.ktor.server.routing.RoutingCall{}pathAccumulating[0]
    final inline fun (io.ktor.server.routing/RoutingCall).<get-pathAccumulating>(): arrow.raise.ktor.server.request/AccumulatingParameters // arrow.raise.ktor.server.request/pathAccumulating.<get-pathAccumulating>|<get-pathAccumulating>@io.ktor.server.routing.RoutingCall(){}[0]
final val arrow.raise.ktor.server.request/pathRaising // arrow.raise.ktor.server.request/pathRaising|(io.ktor.server.routing.RoutingContext){}pathRaising[0]
    final inline fun (context(io.ktor.server.routing/RoutingContext)).<get-pathRaising>(): arrow.raise.ktor.server.request/RaisingParameters // arrow.raise.ktor.server.request/pathRaising.<get-pathRaising>|<get-pathRaising>(io.ktor.server.routing.RoutingContext)(){}[0]
final val arrow.raise.ktor.server.request/pathRaising // arrow.raise.ktor.server.request/pathRaising|@io.ktor.server.routing.RoutingCall{}pathRaising[0]
    final fun (io.ktor.server.routing/RoutingCall).<get-pathRaising>(): arrow.raise.ktor.server.request/RaisingParameters // arrow.raise.ktor.server.request/pathRaising.<get-pathRaising>|<get-pathRaising>@io.ktor.server.routing.RoutingCall(){}[0]
final val arrow.raise.ktor.server.request/queryAccumulating // arrow.raise.ktor.server.request/queryAccumulating|(io.ktor.server.routing.RoutingContext){}queryAccumulating[0]
    final inline fun (context(io.ktor.server.routing/RoutingContext)).<get-queryAccumulating>(): arrow.raise.ktor.server.request/AccumulatingParameters // arrow.raise.ktor.server.request/queryAccumulating.<get-queryAccumulating>|<get-queryAccumulating>(io.ktor.server.routing.RoutingContext)(){}[0]
final val arrow.raise.ktor.server.request/queryAccumulating // arrow.raise.ktor.server.request/queryAccumulating|@io.ktor.server.routing.RoutingCall{}queryAccumulating[0]
    final inline fun (io.ktor.server.routing/RoutingCall).<get-queryAccumulating>(): arrow.raise.ktor.server.request/AccumulatingParameters // arrow.raise.ktor.server.request/queryAccumulating.<get-queryAccumulating>|<get-queryAccumulating>@io.ktor.server.routing.RoutingCall(){}[0]
final val arrow.raise.ktor.server.request/queryRaising // arrow.raise.ktor.server.request/queryRaising|(io.ktor.server.routing.RoutingContext){}queryRaising[0]
    final inline fun (context(io.ktor.server.routing/RoutingContext)).<get-queryRaising>(): arrow.raise.ktor.server.request/RaisingParameters // arrow.raise.ktor.server.request/queryRaising.<get-queryRaising>|<get-queryRaising>(io.ktor.server.routing.RoutingContext)(){}[0]
final val arrow.raise.ktor.server.request/queryRaising // arrow.raise.ktor.server.request/queryRaising|@io.ktor.server.routing.RoutingCall{}queryRaising[0]
    final fun (io.ktor.server.routing/RoutingCall).<get-queryRaising>(): arrow.raise.ktor.server.request/RaisingParameters // arrow.raise.ktor.server.request/queryRaising.<get-queryRaising>|<get-queryRaising>@io.ktor.server.routing.RoutingCall(){}[0]
final val arrow.raise.ktor.server/RaiseErrorResponse // arrow.raise.ktor.server/RaiseErrorResponse|{}RaiseErrorResponse[0]
    final fun <get-RaiseErrorResponse>(): io.ktor.server.application/RouteScopedPlugin<arrow.raise.ktor.server/RaiseErrorResponseConfig> // arrow.raise.ktor.server/RaiseErrorResponse.<get-RaiseErrorResponse>|<get-RaiseErrorResponse>(){}[0]

final fun (arrow.core.raise/Raise<arrow.raise.ktor.server/Response>).arrow.raise.ktor.server/raise(io.ktor.http.content/OutgoingContent): kotlin/Nothing // arrow.raise.ktor.server/raise|raise@arrow.core.raise.Raise<arrow.raise.ktor.server.Response>(io.ktor.http.content.OutgoingContent){}[0]
final fun (arrow.core.raise/Raise<arrow.raise.ktor.server/Response>).arrow.raise.ktor.server/raise(io.ktor.http/HttpStatusCode): kotlin/Nothing // arrow.raise.ktor.server/raise|raise@arrow.core.raise.Raise<arrow.raise.ktor.server.Response>(io.ktor.http.HttpStatusCode){}[0]
final fun (arrow.raise.ktor.server.request/RequestError).arrow.raise.ktor.server.request/toSimpleMessage(): kotlin/String // arrow.raise.ktor.server.request/toSimpleMessage|toSimpleMessage@arrow.raise.ktor.server.request.RequestError(){}[0]
final fun (context(arrow.core.raise/Raise<arrow.raise.ktor.server.request/MissingParameter>), io.ktor.http/Parameters).arrow.raise.ktor.server.request/parameterOrRaise(arrow.raise.ktor.server.request/Parameter): kotlin/String // arrow.raise.ktor.server.request/parameterOrRaise|parameterOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.request.MissingParameter>)@io.ktor.http.Parameters(arrow.raise.ktor.server.request.Parameter){}[0]
final fun (context(arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>), io.ktor.server.routing/RoutingCall).arrow.raise.ktor.server.request/pathOrRaise(kotlin/String): kotlin/String // arrow.raise.ktor.server.request/pathOrRaise|pathOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>)@io.ktor.server.routing.RoutingCall(kotlin.String){}[0]
final fun (context(arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>), io.ktor.server.routing/RoutingCall).arrow.raise.ktor.server.request/queryOrRaise(kotlin/String): kotlin/String // arrow.raise.ktor.server.request/queryOrRaise|queryOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>)@io.ktor.server.routing.RoutingCall(kotlin.String){}[0]
final fun (context(arrow.core.raise/Raise<arrow.raise.ktor.server/Response>)).arrow.raise.ktor.server/raise(io.ktor.http.content/OutgoingContent): kotlin/Nothing // arrow.raise.ktor.server/raise|raise(arrow.core.raise.Raise<arrow.raise.ktor.server.Response>)(io.ktor.http.content.OutgoingContent){}[0]
final fun (context(arrow.core.raise/Raise<arrow.raise.ktor.server/Response>)).arrow.raise.ktor.server/raise(io.ktor.http/HttpStatusCode): kotlin/Nothing // arrow.raise.ktor.server/raise|raise(arrow.core.raise.Raise<arrow.raise.ktor.server.Response>)(io.ktor.http.HttpStatusCode){}[0]
final fun (context(arrow.core.raise/Raise<arrow.raise.ktor.server/Response>), arrow.raise.ktor.server.request/RaisingParameters).arrow.raise.ktor.server.request/invoke(): kotlin.properties/PropertyDelegateProvider<kotlin/Nothing?, arrow.raise.ktor.server.request/Value<kotlin/String>> // arrow.raise.ktor.server.request/invoke|invoke(arrow.core.raise.Raise<arrow.raise.ktor.server.Response>)@arrow.raise.ktor.server.request.RaisingParameters(){}[0]
final fun (context(arrow.core.raise/Raise<arrow.raise.ktor.server/Response>), io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server.request/pathOrRaise(kotlin/String): kotlin/String // arrow.raise.ktor.server.request/pathOrRaise|pathOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.Response>)@io.ktor.server.routing.RoutingContext(kotlin.String){}[0]
final fun (context(arrow.core.raise/Raise<arrow.raise.ktor.server/Response>), io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server.request/queryOrRaise(kotlin/String): kotlin/String // arrow.raise.ktor.server.request/queryOrRaise|queryOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.Response>)@io.ktor.server.routing.RoutingContext(kotlin.String){}[0]
final fun (context(io.ktor.server.routing/RoutingContext), arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).arrow.raise.ktor.server.request/pathOrRaise(kotlin/String): kotlin/String // arrow.raise.ktor.server.request/pathOrRaise|pathOrRaise(io.ktor.server.routing.RoutingContext)@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(kotlin.String){}[0]
final fun (context(io.ktor.server.routing/RoutingContext), arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).arrow.raise.ktor.server.request/queryOrRaise(kotlin/String): kotlin/String // arrow.raise.ktor.server.request/queryOrRaise|queryOrRaise(io.ktor.server.routing.RoutingContext)@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(kotlin.String){}[0]
final fun (io.ktor.server.application/ApplicationCall).arrow.raise.ktor.server/errorResponse(arrow.raise.ktor.server.request/RequestError): arrow.raise.ktor.server/Response // arrow.raise.ktor.server/errorResponse|errorResponse@io.ktor.server.application.ApplicationCall(arrow.raise.ktor.server.request.RequestError){}[0]
final fun (io.ktor.server.application/ApplicationCall).arrow.raise.ktor.server/errorsResponse(arrow.core/NonEmptyList<arrow.raise.ktor.server.request/RequestError>): arrow.raise.ktor.server/Response // arrow.raise.ktor.server/errorsResponse|errorsResponse@io.ktor.server.application.ApplicationCall(arrow.core.NonEmptyList<arrow.raise.ktor.server.request.RequestError>){}[0]
final fun (io.ktor.server.routing/Route).arrow.raise.ktor.server/handleOrRaise(kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, kotlin/Unit>) // arrow.raise.ktor.server/handleOrRaise|handleOrRaise@io.ktor.server.routing.Route(kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun <#A: kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>), io.ktor.http/Parameters).arrow.raise.ktor.server.request/parameterOrRaise(arrow.raise.ktor.server.request/Parameter, io.ktor.util.reflect/TypeInfo): #A // arrow.raise.ktor.server.request/parameterOrRaise|parameterOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>)@io.ktor.http.Parameters(arrow.raise.ktor.server.request.Parameter;io.ktor.util.reflect.TypeInfo){0ยง<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>), io.ktor.server.routing/RoutingCall).arrow.raise.ktor.server.request/pathOrRaise(kotlin/String, io.ktor.util.reflect/TypeInfo): #A // arrow.raise.ktor.server.request/pathOrRaise|pathOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>)@io.ktor.server.routing.RoutingCall(kotlin.String;io.ktor.util.reflect.TypeInfo){0ยง<kotlin.Any>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.raise.ktor.server/imap(kotlin/Function1<#B, #A>): arrow.core.raise/Raise<#B> // arrow.raise.ktor.server/imap|imap@arrow.core.raise.Raise<0:0>(kotlin.Function1<0:1,0:0>){0ยง<kotlin.Any?>;1ยง<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>), io.ktor.http/Parameters).arrow.raise.ktor.server.request/parameterOrRaise(arrow.raise.ktor.server.request/Parameter, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A>): #A // arrow.raise.ktor.server.request/parameterOrRaise|parameterOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>)@io.ktor.http.Parameters(arrow.raise.ktor.server.request.Parameter;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0ยง<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>), io.ktor.server.routing/RoutingCall).arrow.raise.ktor.server.request/pathOrRaise(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A>): #A // arrow.raise.ktor.server.request/pathOrRaise|pathOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>)@io.ktor.server.routing.RoutingCall(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0ยง<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>), io.ktor.server.routing/RoutingCall).arrow.raise.ktor.server.request/queryOrRaise(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A>): #A // arrow.raise.ktor.server.request/queryOrRaise|queryOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>)@io.ktor.server.routing.RoutingCall(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0ยง<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server/Response>), arrow.raise.ktor.server.request/RaisingParameters).arrow.raise.ktor.server.request/invoke(crossinline kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A>): kotlin.properties/PropertyDelegateProvider<kotlin/Nothing?, arrow.raise.ktor.server.request/Value<#A>> // arrow.raise.ktor.server.request/invoke|invoke(arrow.core.raise.Raise<arrow.raise.ktor.server.Response>)@arrow.raise.ktor.server.request.RaisingParameters(kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0ยง<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server/Response>), io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server.request/pathOrRaise(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A>): #A // arrow.raise.ktor.server.request/pathOrRaise|pathOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.Response>)@io.ktor.server.routing.RoutingContext(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0ยง<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server/Response>), io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server.request/queryOrRaise(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A>): #A // arrow.raise.ktor.server.request/queryOrRaise|queryOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.Response>)@io.ktor.server.routing.RoutingContext(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0ยง<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (context(io.ktor.server.routing/RoutingContext), arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).arrow.raise.ktor.server.request/pathOrRaise(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A>): #A // arrow.raise.ktor.server.request/pathOrRaise|pathOrRaise(io.ktor.server.routing.RoutingContext)@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0ยง<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (context(io.ktor.server.routing/RoutingContext), arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).arrow.raise.ktor.server.request/queryOrRaise(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A>): #A // arrow.raise.ktor.server.request/queryOrRaise|queryOrRaise(io.ktor.server.routing.RoutingContext)@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0ยง<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?> (context(arrow.core.raise/Raise<arrow.raise.ktor.server/Response>), io.ktor.server.application/ApplicationCall).arrow.raise.ktor.server/raisingErrorResponse(kotlin/Function1<arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>, #A>): #A // arrow.raise.ktor.server/raisingErrorResponse|raisingErrorResponse(arrow.core.raise.Raise<arrow.raise.ktor.server.Response>)@io.ktor.server.application.ApplicationCall(kotlin.Function1<arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (context(arrow.core.raise/Raise<arrow.raise.ktor.server/Response>), io.ktor.server.application/ApplicationCall).arrow.raise.ktor.server/raisingErrorsResponse(kotlin/Function1<arrow.core.raise/Raise<arrow.core/NonEmptyList<arrow.raise.ktor.server.request/RequestError>>, #A>): #A // arrow.raise.ktor.server/raisingErrorsResponse|raisingErrorsResponse(arrow.core.raise.Raise<arrow.raise.ktor.server.Response>)@io.ktor.server.application.ApplicationCall(kotlin.Function1<arrow.core.raise.Raise<arrow.core.NonEmptyList<arrow.raise.ktor.server.request.RequestError>>,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (context(arrow.core.raise/Raise<arrow.raise.ktor.server/Response>), io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server/raisingErrorResponse(kotlin/Function1<arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>, #A>): #A // arrow.raise.ktor.server/raisingErrorResponse|raisingErrorResponse(arrow.core.raise.Raise<arrow.raise.ktor.server.Response>)@io.ktor.server.routing.RoutingContext(kotlin.Function1<arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (context(arrow.core.raise/Raise<arrow.raise.ktor.server/Response>), io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server/raisingErrorsResponse(kotlin/Function1<arrow.core.raise/Raise<arrow.core/NonEmptyList<arrow.raise.ktor.server.request/RequestError>>, #A>): #A // arrow.raise.ktor.server/raisingErrorsResponse|raisingErrorsResponse(arrow.core.raise.Raise<arrow.raise.ktor.server.Response>)@io.ktor.server.routing.RoutingContext(kotlin.Function1<arrow.core.raise.Raise<arrow.core.NonEmptyList<arrow.raise.ktor.server.request.RequestError>>,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (context(arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext)).arrow.raise.ktor.server.request/validate(kotlin/Function1<arrow.core/NonEmptyList<arrow.raise.ktor.server.request/RequestError>, arrow.raise.ktor.server/Response> = ..., kotlin/Function2<io.ktor.server.routing/RoutingContext, arrow.core.raise/RaiseAccumulate<arrow.raise.ktor.server.request/RequestError>, #A>): #A // arrow.raise.ktor.server.request/validate|validate(arrow.core.raise.Raise<arrow.raise.ktor.server.Response>;io.ktor.server.routing.RoutingContext)(kotlin.Function1<arrow.core.NonEmptyList<arrow.raise.ktor.server.request.RequestError>,arrow.raise.ktor.server.Response>;kotlin.Function2<io.ktor.server.routing.RoutingContext,arrow.core.raise.RaiseAccumulate<arrow.raise.ktor.server.request.RequestError>,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> arrow.raise.ktor.server.request/provider(crossinline kotlin/Function1<kotlin/String, #A>): kotlin.properties/PropertyDelegateProvider<kotlin/Nothing?, #A> // arrow.raise.ktor.server.request/provider|provider(kotlin.Function1<kotlin.String,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/patchOrRaise(io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondingRaiseRoutingHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondingRaiseRoutingHandler<0:0,0:1>){0ยง<kotlin.Any>;1ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/patchOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondingRaiseRoutingHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondingRaiseRoutingHandler<0:0,0:1>){0ยง<kotlin.Any>;1ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/patchOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondingRaiseRoutingHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondingRaiseRoutingHandler<0:0,0:1>){0ยง<kotlin.Any>;1ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/postOrRaise(io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondingRaiseRoutingHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/postOrRaise|postOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondingRaiseRoutingHandler<0:0,0:1>){0ยง<kotlin.Any>;1ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/postOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondingRaiseRoutingHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/postOrRaise|postOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondingRaiseRoutingHandler<0:0,0:1>){0ยง<kotlin.Any>;1ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/postOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondingRaiseRoutingHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/postOrRaise|postOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondingRaiseRoutingHandler<0:0,0:1>){0ยง<kotlin.Any>;1ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/putOrRaise(io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondingRaiseRoutingHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/putOrRaise|putOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondingRaiseRoutingHandler<0:0,0:1>){0ยง<kotlin.Any>;1ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/putOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondingRaiseRoutingHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/putOrRaise|putOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondingRaiseRoutingHandler<0:0,0:1>){0ยง<kotlin.Any>;1ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/putOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondingRaiseRoutingHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/putOrRaise|putOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondingRaiseRoutingHandler<0:0,0:1>){0ยง<kotlin.Any>;1ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>), io.ktor.server.routing/RoutingCall).arrow.raise.ktor.server.request/pathOrRaise(kotlin/String): #A // arrow.raise.ktor.server.request/pathOrRaise|pathOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>)@io.ktor.server.routing.RoutingCall(kotlin.String){0ยง<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>), io.ktor.server.routing/RoutingCall).arrow.raise.ktor.server.request/queryOrRaise(kotlin/String): #A // arrow.raise.ktor.server.request/queryOrRaise|queryOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>)@io.ktor.server.routing.RoutingCall(kotlin.String){0ยง<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server/Response>), arrow.raise.ktor.server.request/RaisingParameters).arrow.raise.ktor.server.request/invoke(): kotlin.properties/PropertyDelegateProvider<kotlin/Nothing?, arrow.raise.ktor.server.request/Value<#A>> // arrow.raise.ktor.server.request/invoke|invoke(arrow.core.raise.Raise<arrow.raise.ktor.server.Response>)@arrow.raise.ktor.server.request.RaisingParameters(){0ยง<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server/Response>), io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server.request/pathOrRaise(kotlin/String): #A // arrow.raise.ktor.server.request/pathOrRaise|pathOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.Response>)@io.ktor.server.routing.RoutingContext(kotlin.String){0ยง<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server/Response>), io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server.request/queryOrRaise(kotlin/String): #A // arrow.raise.ktor.server.request/queryOrRaise|queryOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.Response>)@io.ktor.server.routing.RoutingContext(kotlin.String){0ยง<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any> (context(io.ktor.server.routing/RoutingContext), arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).arrow.raise.ktor.server.request/pathOrRaise(kotlin/String): #A // arrow.raise.ktor.server.request/pathOrRaise|pathOrRaise(io.ktor.server.routing.RoutingContext)@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(kotlin.String){0ยง<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any> (context(io.ktor.server.routing/RoutingContext), arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).arrow.raise.ktor.server.request/queryOrRaise(kotlin/String): #A // arrow.raise.ktor.server.request/queryOrRaise|queryOrRaise(io.ktor.server.routing.RoutingContext)@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(kotlin.String){0ยง<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any?> (arrow.core.raise/Raise<arrow.raise.ktor.server/Response>).arrow.raise.ktor.server/raise(io.ktor.http/HttpStatusCode, #A): kotlin/Nothing // arrow.raise.ktor.server/raise|raise@arrow.core.raise.Raise<arrow.raise.ktor.server.Response>(io.ktor.http.HttpStatusCode;0:0){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (context(arrow.core.raise/Raise<arrow.raise.ktor.server/Response>)).arrow.raise.ktor.server/raise(io.ktor.http/HttpStatusCode, #A): kotlin/Nothing // arrow.raise.ktor.server/raise|raise(arrow.core.raise.Raise<arrow.raise.ktor.server.Response>)(io.ktor.http.HttpStatusCode;0:0){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/deleteOrRaise(io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/deleteOrRaise|deleteOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/deleteOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/deleteOrRaise|deleteOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/deleteOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/deleteOrRaise|deleteOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/getOrRaise(io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/getOrRaise|getOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/getOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/getOrRaise|getOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/getOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/getOrRaise|getOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/headOrRaise(io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/headOrRaise|headOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/headOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/headOrRaise|headOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/headOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/headOrRaise|headOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/optionsOrRaise(io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/optionsOrRaise|optionsOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/optionsOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/optionsOrRaise|optionsOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/optionsOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/optionsOrRaise|optionsOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/patchOrRaise(io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/patchOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/patchOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/postOrRaise(io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/postOrRaise|postOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/postOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/postOrRaise|postOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/postOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/postOrRaise|postOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/putOrRaise(io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/putOrRaise|putOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/putOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/putOrRaise|putOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/putOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/putOrRaise|putOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final suspend fun (io.ktor.server.routing/RoutingCall).arrow.raise.ktor.server/respondSafely(io.ktor.http/HttpStatusCode?, kotlin/Any?, io.ktor.util.reflect/TypeInfo) // arrow.raise.ktor.server/respondSafely|respondSafely@io.ktor.server.routing.RoutingCall(io.ktor.http.HttpStatusCode?;kotlin.Any?;io.ktor.util.reflect.TypeInfo){}[0]
final suspend fun <#A: kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server.request/Malformed>), io.ktor.server.routing/RoutingCall).arrow.raise.ktor.server.request/receiveNullableOrRaise(io.ktor.util.reflect/TypeInfo): #A? // arrow.raise.ktor.server.request/receiveNullableOrRaise|receiveNullableOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.request.Malformed>)@io.ktor.server.routing.RoutingCall(io.ktor.util.reflect.TypeInfo){0ยง<kotlin.Any>}[0]
final suspend fun <#A: kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server.request/Malformed>), io.ktor.server.routing/RoutingCall).arrow.raise.ktor.server.request/receiveOrRaise(io.ktor.util.reflect/TypeInfo): #A // arrow.raise.ktor.server.request/receiveOrRaise|receiveOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.request.Malformed>)@io.ktor.server.routing.RoutingCall(io.ktor.util.reflect.TypeInfo){0ยง<kotlin.Any>}[0]
final suspend inline fun (io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server/handleOrRaise(kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, kotlin/Unit>) // arrow.raise.ktor.server/handleOrRaise|handleOrRaise@io.ktor.server.routing.RoutingContext(kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server/respondOrRaise(io.ktor.http/HttpStatusCode? = ..., io.ktor.util.reflect/TypeInfo, io.ktor.util.reflect/TypeInfo, arrow.raise.ktor.server/ReceivingRespondingRaiseRoutingHandler<#A, #B>) // arrow.raise.ktor.server/respondOrRaise|respondOrRaise@io.ktor.server.routing.RoutingContext(io.ktor.http.HttpStatusCode?;io.ktor.util.reflect.TypeInfo;io.ktor.util.reflect.TypeInfo;arrow.raise.ktor.server.ReceivingRespondingRaiseRoutingHandler<0:0,0:1>){0ยง<kotlin.Any?>;1ยง<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?> (io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server/respondOrRaise(io.ktor.http/HttpStatusCode? = ..., io.ktor.util.reflect/TypeInfo, kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>) // arrow.raise.ktor.server/respondOrRaise|respondOrRaise@io.ktor.server.routing.RoutingContext(io.ktor.http.HttpStatusCode?;io.ktor.util.reflect.TypeInfo;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
final suspend inline fun <#A: reified kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>)).arrow.raise.ktor.server.request/receiveNullableOrRaise(io.ktor.server.routing/RoutingCall): #A? // arrow.raise.ktor.server.request/receiveNullableOrRaise|receiveNullableOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>)(io.ktor.server.routing.RoutingCall){0ยง<kotlin.Any>}[0]
final suspend inline fun <#A: reified kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>)).arrow.raise.ktor.server.request/receiveOrRaise(io.ktor.server.routing/RoutingCall): #A // arrow.raise.ktor.server.request/receiveOrRaise|receiveOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>)(io.ktor.server.routing.RoutingCall){0ยง<kotlin.Any>}[0]
final suspend inline fun <#A: reified kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server/Response>), io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server.request/receiveNullableOrRaise(): #A? // arrow.raise.ktor.server.request/receiveNullableOrRaise|receiveNullableOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.Response>)@io.ktor.server.routing.RoutingContext(){0ยง<kotlin.Any>}[0]
final suspend inline fun <#A: reified kotlin/Any> (context(arrow.core.raise/Raise<arrow.raise.ktor.server/Response>), io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server.request/receiveOrRaise(): #A // arrow.raise.ktor.server.request/receiveOrRaise|receiveOrRaise(arrow.core.raise.Raise<arrow.raise.ktor.server.Response>)@io.ktor.server.routing.RoutingContext(){0ยง<kotlin.Any>}[0]
final suspend inline fun <#A: reified kotlin/Any> (context(arrow.core.raise/RaiseAccumulate<arrow.raise.ktor.server.request/RequestError>), io.ktor.server.routing/RoutingCall).arrow.raise.ktor.server.request/receiveAccumulating(): arrow.core.raise/RaiseAccumulate.Value<#A> // arrow.raise.ktor.server.request/receiveAccumulating|receiveAccumulating(arrow.core.raise.RaiseAccumulate<arrow.raise.ktor.server.request.RequestError>)@io.ktor.server.routing.RoutingCall(){0ยง<kotlin.Any>}[0]
final suspend inline fun <#A: reified kotlin/Any> (context(arrow.core.raise/RaiseAccumulate<arrow.raise.ktor.server.request/RequestError>), io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server.request/receiveAccumulating(): arrow.core.raise/RaiseAccumulate.Value<#A> // arrow.raise.ktor.server.request/receiveAccumulating|receiveAccumulating(arrow.core.raise.RaiseAccumulate<arrow.raise.ktor.server.request.RequestError>)@io.ktor.server.routing.RoutingContext(){0ยง<kotlin.Any>}[0]
final suspend inline fun <#A: reified kotlin/Any> (context(io.ktor.server.routing/RoutingContext), arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).arrow.raise.ktor.server.request/receiveNullableOrRaise(): #A? // arrow.raise.ktor.server.request/receiveNullableOrRaise|receiveNullableOrRaise(io.ktor.server.routing.RoutingContext)@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(){0ยง<kotlin.Any>}[0]
final suspend inline fun <#A: reified kotlin/Any> (context(io.ktor.server.routing/RoutingContext), arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).arrow.raise.ktor.server.request/receiveOrRaise(): #A // arrow.raise.ktor.server.request/receiveOrRaise|receiveOrRaise(io.ktor.server.routing.RoutingContext)@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(){0ยง<kotlin.Any>}[0]
final suspend inline fun <#A: reified kotlin/Any?, #B: reified kotlin/Any?> (io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server/respondOrRaise(io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondingRaiseRoutingHandler<#A, #B>) // arrow.raise.ktor.server/respondOrRaise|respondOrRaise@io.ktor.server.routing.RoutingContext(io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondingRaiseRoutingHandler<0:0,0:1>){0ยง<kotlin.Any?>;1ยง<kotlin.Any?>}[0]
final suspend inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server/respondOrRaise(io.ktor.http/HttpStatusCode? = ..., kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext, #A>) // arrow.raise.ktor.server/respondOrRaise|respondOrRaise@io.ktor.server.routing.RoutingContext(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,io.ktor.server.routing.RoutingContext,0:0>){0ยง<kotlin.Any?>}[0]
